--[[
    FirstMinionSystem_Server.lua
    Fixed server-side script for better handling of first minion acquisition
    TYPE: Normal Script (place in ServerScriptService)
]]

local ServerScriptService = game:GetService("ServerScriptService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")

print("FirstMinionSystem_Server starting...")

-- Create necessary RemoteEvents folder first
local remotes = ReplicatedStorage:FindFirstChild("Remotes")
if not remotes then
	remotes = Instance.new("Folder")
	remotes.Name = "Remotes"
	remotes.Parent = ReplicatedStorage
	print("Created Remotes folder")
end

-- Create essential RemoteEvents and Functions
local function createRemote(name, className)
	local remote = remotes:FindFirstChild(name)
	if not remote then
		remote = Instance.new(className)
		remote.Name = name
		remote.Parent = remotes
		print("Created " .. name .. " " .. className)
	end
	return remote
end

-- Create necessary RemoteEvents
local getStarterMinionEvent = createRemote("GetStarterMinion", "RemoteEvent")
local updateUIEvent = createRemote("UpdateUI", "RemoteEvent")
local playerReadyEvent = createRemote("PlayerReady", "RemoteEvent")
local getPlayerDataFunction = createRemote("GetPlayerData", "RemoteFunction")

-- Wait to make sure everything is fully loaded
wait(1)

-- Helper function to store player data (as a fallback)
local playerDataCache = {}

local function getPlayerData(player)
	-- Check if data exists in cache
	if playerDataCache[player.UserId] then
		return playerDataCache[player.UserId]
	end

	-- Try getting data from DataManager first
	local success, result = pcall(function()
		local DataManager = require(ReplicatedStorage.Modules.DataManager)
		if DataManager and DataManager.GetData then
			return DataManager:GetData(player)
		end
		return nil
	end)

	if success and result then
		return result
	end

	-- If DataManager failed, create new data
	print("Creating new player data for: " .. player.Name)
	local playerData = {
		Minions = {},
		Coins = 0,
		Diamonds = 0,
		Rubies = 0,
		UnlockedZones = {1},
		Stats = {
			EnemiesDefeated = 0,
			BossesDefeated = 0,
			TotalCoinsEarned = 0,
			HighestZoneReached = 1
		}
	}

	-- Cache the data
	playerDataCache[player.UserId] = playerData
	return playerData
end

local function savePlayerData(player, data)
	-- Cache the data
	playerDataCache[player.UserId] = data

	-- Try saving via DataManager
	pcall(function()
		local DataManager = require(ReplicatedStorage.Modules.DataManager)
		if DataManager and DataManager.SaveData then
			DataManager:SaveData(player, data)
		end
	end)
end

-- Import MinionManager (with error handling)
local MinionManager
local success, result = pcall(function()
	return require(ReplicatedStorage.Modules.MinionManager)
end)

if success then
	MinionManager = result
	print("Successfully loaded MinionManager module")
else
	warn("Failed to require MinionManager: " .. tostring(result))

	-- Create a minimal MinionManager as fallback
	MinionManager = {
		GenerateUUID = function()
			local template = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'
			return string.gsub(template, '[xy]', function(c)
				local v = (c == 'x') and math.random(0, 0xf) or math.random(8, 0xb)
				return string.format('%x', v)
			end)
		end,

		SpawnMinion = function(self, minionData, player)
			print("Attempting to spawn minion with fallback: " .. minionData.ID .. " for player: " .. player.Name)

			-- Create a simple sphere to represent the minion
			local part = Instance.new("Part")
			part.Name = "EmergencyMinion_" .. minionData.UUID
			part.Shape = Enum.PartType.Ball
			part.Size = Vector3.new(2, 2, 2) * 0.5
			part.BrickColor = BrickColor.new("Bright blue")
			part.Material = Enum.Material.Neon
			part.CanCollide = false
			part.Anchored = false

			-- Position it behind the player
			if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
				part.CFrame = player.Character.HumanoidRootPart.CFrame * CFrame.new(0, 0, -5)

				-- Weld to player for following
				local weld = Instance.new("WeldConstraint")
				weld.Part0 = player.Character.HumanoidRootPart
				weld.Part1 = part
				weld.Parent = part
			else
				part.Position = Vector3.new(0, 10, 0)
				part.Anchored = true
			end

			-- Add a billboard GUI for the name
			local billboardGui = Instance.new("BillboardGui")
			billboardGui.Name = "NameTag"
			billboardGui.Size = UDim2.new(0, 100, 0, 40)
			billboardGui.StudsOffset = Vector3.new(0, 1, 0)
			billboardGui.Adornee = part

			local nameLabel = Instance.new("TextLabel")
			nameLabel.Name = "NameLabel"
			nameLabel.Size = UDim2.new(1, 0, 1, 0)
			nameLabel.BackgroundTransparency = 1
			nameLabel.TextColor3 = Color3.new(1, 1, 1)
			nameLabel.TextStrokeTransparency = 0
			nameLabel.TextStrokeColor3 = Color3.new(0, 0, 0)
			nameLabel.Font = Enum.Font.GothamBold
			nameLabel.TextSize = 14
			nameLabel.Text = "Basic Minion"
			nameLabel.Parent = billboardGui

			billboardGui.Parent = part

			-- Create folder structure
			local minionsFolder = workspace:FindFirstChild("Minions")
			if not minionsFolder then
				minionsFolder = Instance.new("Folder")
				minionsFolder.Name = "Minions"
				minionsFolder.Parent = workspace
			end

			local playerMinionsFolder = minionsFolder:FindFirstChild(player.Name)
			if not playerMinionsFolder then
				playerMinionsFolder = Instance.new("Folder")
				playerMinionsFolder.Name = player.Name
				playerMinionsFolder.Parent = minionsFolder
			end

			part.Parent = playerMinionsFolder

			return true
		end
	}

	print("Created fallback MinionManager")
end

-- Define GetPlayerData function
getPlayerDataFunction.OnServerInvoke = function(player)
	return getPlayerData(player)
end

-- Handler for the GetStarterMinion event
getStarterMinionEvent.OnServerEvent:Connect(function(player)
	print("GetStarterMinion event received from: " .. player.Name)

	-- Get player data using our robust function
	local playerData = getPlayerData(player)

	-- Check if player data exists
	if not playerData then
		warn("Player data still not available for: " .. player.Name)

		-- Create basic structure just to continue
		playerData = {
			Minions = {},
			Coins = 0,
			Diamonds = 0,
			Rubies = 0,
			UnlockedZones = {1},
			Stats = {
				EnemiesDefeated = 0,
				BossesDefeated = 0,
				TotalCoinsEarned = 0,
				HighestZoneReached = 1
			}
		}
	end

	-- Check if the player already has minions
	if playerData.Minions and #playerData.Minions > 0 then
		-- Player already has minions, send error
		updateUIEvent:FireClient(player, {
			Type = "StarterMinionError",
			ErrorMessage = "You already have minions!",
			PlayerData = playerData
		})
		return
	end

	-- Initialize minions array if it doesn't exist
	if not playerData.Minions then
		playerData.Minions = {}
	end

	-- Generate UUID (with fallback)
	local uuid
	if MinionManager.GenerateUUID then
		uuid = MinionManager:GenerateUUID()
	else
		-- Simple UUID fallback
		uuid = "MINION-" .. tostring(math.random(10000,99999))
	end

	-- Create starter minion
	local starterMinion = {
		ID = "MINION_BASIC",
		UUID = uuid,
		Level = 1,
		XP = 0,
		Equipped = true,
		Variant = "Normal",
		Rarity = "Common",
		EquippedGear = nil,
		EquippedAura = nil,
		Stats = {
			Damage = 5,
			Speed = 10,
			CoinsMultiplier = 1.0
		}
	}

	-- Add the minion to the player's data
	table.insert(playerData.Minions, starterMinion)

	-- Save the player's data using our robust function
	savePlayerData(player, playerData)

	print("Created starter minion for: " .. player.Name)

	-- Spawn the minion in the world
	if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
		-- Attempt to spawn the minion in a protected call
		local spawnSuccess, spawnResult = pcall(function()
			return MinionManager:SpawnMinion(starterMinion, player)
		end)

		if not spawnSuccess then
			warn("Error during minion spawn: " .. tostring(spawnResult))

			-- Try again with a fallback approach
			warn("Attempting fallback spawn method for: " .. player.Name)
			MinionManager:SpawnMinion(starterMinion, player)
		end
	else
		-- Character not loaded yet, schedule spawn for later
		warn("Character not loaded for player: " .. player.Name .. ", scheduling minion spawn for later")

		-- Try spawning once the character is loaded
		local characterAddedConnection
		characterAddedConnection = player.CharacterAdded:Connect(function(character)
			-- Wait for HumanoidRootPart
			character:WaitForChild("HumanoidRootPart", 10)

			-- Attempt to spawn the minion
			local spawnSuccess, spawnResult = pcall(function()
				return MinionManager:SpawnMinion(starterMinion, player)
			end)

			if not spawnSuccess then
				warn("Error during minion spawn after character added: " .. tostring(spawnResult))

				-- Try fallback method
				MinionManager:SpawnMinion(starterMinion, player)
			end

			-- Disconnect this event since we only want to spawn once
			characterAddedConnection:Disconnect()
		end)
	end

	-- Notify the client
	updateUIEvent:FireClient(player, {
		Type = "StarterMinionReceived",
		Minion = starterMinion,
		PlayerData = playerData
	})

	print("Sent StarterMinionReceived event to: " .. player.Name)
end)

-- When player joins
Players.PlayerAdded:Connect(function(player)
	-- Wait for player to fully load
	wait(2)

	-- Load player data using our robust function
	local playerData = getPlayerData(player)

	-- Send the PlayerReady event
	-- This will trigger the client to show the first minion UI if needed
	playerReadyEvent:FireClient(player, {
		PlayerData = playerData
	})

	print("Sent PlayerReady event to: " .. player.Name)

	-- If player already has minions, try to spawn them when the character loads
	if playerData.Minions and #playerData.Minions > 0 then
		-- Function to spawn player's minions
		local function spawnPlayerMinions()
			-- Wait for the character to be ready
			if not player.Character or not player.Character:FindFirstChild("HumanoidRootPart") then
				return
			end

			-- Spawn each minion that is equipped
			for _, minion in ipairs(playerData.Minions) do
				if minion.Equipped then
					pcall(function()
						MinionManager:SpawnMinion(minion, player)
					end)
				end
			end
		end

		-- Try to spawn minions if character is already loaded
		if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
			spawnPlayerMinions()
		else
			-- Otherwise wait for character to be added
			player.CharacterAdded:Connect(function(character)
				-- Wait for HumanoidRootPart
				character:WaitForChild("HumanoidRootPart", 10)
				spawnPlayerMinions()
			end)
		end
	end
end)

-- When player leaves
Players.PlayerRemoving:Connect(function(player)
	print("Player leaving: " .. player.Name)

	-- Despawn any minions the player had
	pcall(function()
		MinionManager:DespawnPlayerMinions(player)
	end)

	-- Save player data
	local playerData = getPlayerData(player)
	if playerData then
		savePlayerData(player, playerData)
	end

	-- Clear cached data
	playerDataCache[player.UserId] = nil
end)

print("FirstMinionSystem server script initialized")
