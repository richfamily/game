--[[
    MinionManager.lua
    Fixed version that works with your existing MINION_BASIC_MODEL
    TYPE: ModuleScript (place in ReplicatedStorage.Modules)
]]

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

local MinionManager = {}
MinionManager.__index = MinionManager

local fantastyMinionNames = {
	"Banana", "Giggles", "Wacky", "Mellow", "Silly", "Cheeky", "Jolly", "Nutty", "Zany", "Kooky",
	"Bumbling", "Snicker", "Twinkle", "Dizzy", "Sparkle", "Bumblebee", "Frolic", "Puddle", "Puffy", "Cranky",
	"Loopy", "Bouncy", "Smiley", "Snazzy", "Chuckle", "Fluffy", "Muppet", "Giggly", "Tinker", "Jumpy",
	"Snappy", "Cackle", "Pogo", "Muffin", "Sizzle", "Popper", "Quirky", "Doodle", "Mambo", "Rumble",
	"Chortle", "Panting", "Razzle", "Twirly", "Hopper", "Dazzle", "Bongo", "Whirly", "Sprout", "Chirpy",
	"Buzz", "Jelly", "Pepper", "Turbo", "Fuzzy", "Goober", "Noodle", "Pippin", "Wiggle", "Dandy",
	"Tuner", "Bounce", "Widget", "Whimsy", "Dynamo", "Ticker", "Vortex", "Gizmo", "Atlas", "Pixel",
	"Comet", "Quark", "Nitro", "Gadget", "Bolt", "Forge", "Spark", "Echo", "Nimbus", "Cosmos",
	"Orbit", "Prism", "Fusion", "Vertex", "Zenith", "Ripple", "Glimmer", "Fumble", "Tumble", "Plinko",
	"Jumble", "Frizzle", "Flip", "Flapjack", "Sprocket", "Knuckle", "Munchkin", "Pickle", "Cupcake", "Meatball",
	"Popcorn", "Brownie", "Donut", "Pancake", "Waffle", "Biscuit", "Cookie", "Crumble", "Sprinkle", "Jingle",
	"Cog", "Chimp", "Monkey", "Panda", "Rhino", "Koala", "Flamingo", "Hedgehog", "Otter", "Platypus",
	"Seahorse", "Walrus", "Beetle", "Wombat", "Ocelot", "Alpaca", "Llama", "Meerkat", "Ferret", "Gerbil",
	"Hamster", "Rabbit", "Squirrel", "Chipmunk", "Beaver", "Porcupine", "Mongoose", "Pangolin", "Sloth", "Lemur",
	"Baboon", "Gibbon", "Bonobo", "Tarsier", "Macaw", "Pelican", "Toucan", "Puffin", "Starfish", "Squid",
	"Lobster", "Crab", "Shrimp", "Octopus", "Jellyfish", "Marlin", "Piranha", "Trout", "Salmon", "Tuna",
	"Anchovy", "Mussel", "Clam", "Oyster", "Scallop", "Ray", "Stingray", "Swordfish", "Dolphin", "Orca",
	"Manatee", "Narwhal", "Beluga", "Gator", "Raptor", "Kiwi", "Mango", "Papaya", "Avocado", "Coconut",
	"Cherry", "Grape", "Orange", "Lemon", "Lime", "Berry", "Melon", "Apricot", "Peach", "Plum",
	"Strawberry", "Blueberry", "Raspberry", "Blackberry", "Cranberry", "Currant", "Pomegranate", "Tangerine", 
	"Grapefruit", "Date"
}

-- Create a new MinionManager instance
function MinionManager.new()
	local self = setmetatable({}, MinionManager)

	-- Initialize properties
	self.ActiveMinions = {} -- Table to track active minions in the game

	return self
end

-- Generate a unique UUID for minions
function MinionManager:GenerateUUID()
	local template = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'
	return string.gsub(template, '[xy]', function(c)
		local v = (c == 'x') and math.random(0, 0xf) or math.random(8, 0xb)
		return string.format('%x', v)
	end)
end

-- Spawn a minion in the world
function MinionManager:SpawnMinion(minionData, player)
	print("Attempting to spawn minion: " .. minionData.ID .. " for player: " .. player.Name)

	-- Get the minion model
	local minionModel = self:GetMinionModel(minionData.ID, minionData.Variant)
	if not minionModel then
		warn("Failed to find model for minion: " .. minionData.ID)
		return self:CreateEmergencyMinion(minionData, player)
	end

	-- Create Random Name
	local function getRandomMinionName()
		return fantastyMinionNames[math.random(1, #fantastyMinionNames)]
	end

	-- Clone the model
	local minion = minionModel:Clone()
	minion.Name = getRandomMinionName()

	-- Set up the minion properties
	self:SetupMinion(minion, minionData, player)

	-- Add to active minions
	self.ActiveMinions[minionData.UUID] = {
		Model = minion,
		Data = minionData,
		Player = player
	}

	print("Spawned minion: " .. minionData.ID .. " for player: " .. player.Name)
	return true
end

-- Get a minion model from ReplicatedStorage
function MinionManager:GetMinionModel(minionID, variant)
	-- Default to Normal variant if not specified
	variant = variant or "Normal"

	-- First, check in the standard path: ReplicatedStorage.Assets.Minions.Normal
	local assets = ReplicatedStorage:FindFirstChild("Assets")
	if assets then
		local minions = assets:FindFirstChild("Minions")
		if minions then
			local variantFolder = minions:FindFirstChild(variant)
			if variantFolder then
				local modelName = minionID .. "_MODEL"
				local model = variantFolder:FindFirstChild(modelName)
				if model then
					return model
				end
			end
		end
	end

	-- Second, search directly in ReplicatedStorage
	local directModel = ReplicatedStorage:FindFirstChild(minionID .. "_MODEL")
	if directModel then
		return directModel
	end

	-- As a fallback, look anywhere in ReplicatedStorage with FindFirstChild
	local model = ReplicatedStorage:FindFirstChild(minionID .. "_MODEL", true)
	if model then
		return model
	end

	-- If we still can't find it, create a simple placeholder model
	return nil
end

-- Setup a minion instance with the proper properties
function MinionManager:SetupMinion(minion, minionData, player)
	-- Get the player's character
	local character = player.Character
	if not character then return end

	-- Find appropriate parts
	local primaryPart = minion.PrimaryPart
	if not primaryPart then
		-- Try to find a part to use as primary part
		for _, part in pairs(minion:GetDescendants()) do
			if part:IsA("BasePart") then
				primaryPart = part
				minion.PrimaryPart = part
				break
			end
		end
	end

	if not primaryPart then
		warn("No primary part found for minion. Creating a new part.")
		local newPart = Instance.new("Part")
		newPart.Name = "MinionBody"
		newPart.Size = Vector3.new(1, 1, 1)
		newPart.Transparency = 1 -- Invisible part since it's just for following
		newPart.CanCollide = false
		newPart.Anchored = false
		newPart.Parent = minion
		primaryPart = newPart
		minion.PrimaryPart = newPart
	end

	-- Position the minion near the player
	local rootPart = character:FindFirstChild("HumanoidRootPart")
	if rootPart then
		-- Position a bit behind the player
		local offset = CFrame.new(0, 0, -5)
		minion:SetPrimaryPartCFrame(rootPart.CFrame * offset)
	end

	-- Create folders for organization
	local minionsFolder = workspace:FindFirstChild("Minions")
	if not minionsFolder then
		minionsFolder = Instance.new("Folder")
		minionsFolder.Name = "Minions"
		minionsFolder.Parent = workspace
	end

	local playerMinionsFolder = minionsFolder:FindFirstChild(player.Name)
	if not playerMinionsFolder then
		playerMinionsFolder = Instance.new("Folder")
		playerMinionsFolder.Name = player.Name
		playerMinionsFolder.Parent = minionsFolder
	end

	minion.Parent = playerMinionsFolder

	-- Make minion not collide with other minions or players
	-- Use two approaches for maximum compatibility

	-- Approach 1: Set collision properties for all parts
	for _, part in pairs(minion:GetDescendants()) do
		if part:IsA("BasePart") then
			part.CanCollide = false
			part.Anchored = false

			-- Create collision group for minions
			part.CollisionGroup = "Minions"
		end
	end

	-- Approach 2: Set up collision filtering using PhysicsService
	pcall(function()
		local PhysicsService = game:GetService("PhysicsService")

		-- Create collision groups if they don't exist
		local success = pcall(function()
			PhysicsService:RegisterCollisionGroup("Minions")
			PhysicsService:RegisterCollisionGroup("Players")
		end)

		if success then
			-- Set collision group behavior to prevent minions from colliding with players
			PhysicsService:CollisionGroupSetCollidable("Minions", "Players", false)
			PhysicsService:CollisionGroupSetCollidable("Minions", "Minions", false)

			-- Assign parts to collision groups
			for _, part in pairs(minion:GetDescendants()) do
				if part:IsA("BasePart") then
					part.CollisionGroup = "Minions"
				end
			end

			-- Assign player character parts to player collision group
			for _, characterPart in pairs(character:GetDescendants()) do
				if characterPart:IsA("BasePart") then
					characterPart.CollisionGroup = "Players"
				end
			end
		end
	end)

	-- Add nametag if it doesn't exist
	if not minion:FindFirstChild("NameTag") and primaryPart then
		local billboardGui = Instance.new("BillboardGui")
		billboardGui.Name = "NameTag"
		billboardGui.Size = UDim2.new(0, 100, 0, 40)
		billboardGui.StudsOffset = Vector3.new(0, 2, 0)
		billboardGui.Adornee = primaryPart
		billboardGui.Parent = minion

		local nameLabel = Instance.new("TextLabel")
		nameLabel.Name = "NameLabel"
		nameLabel.Size = UDim2.new(1, 0, 1, 0)
		nameLabel.BackgroundTransparency = 1
		nameLabel.TextColor3 = Color3.new(1, 1, 1)
		nameLabel.TextStrokeTransparency = 0
		nameLabel.TextStrokeColor3 = Color3.new(0, 0, 0)
		nameLabel.Font = Enum.Font.GothamBold
		nameLabel.TextSize = 14
		nameLabel.Text = ""
		nameLabel.Parent = billboardGui
	end

	-- Set up follow behavior with BodyPosition for smooth following
	self:SetupFollowBehavior(minion, player)
end

-- Set up reliable follow behavior
function MinionManager:SetupFollowBehavior(minion, player)
	local character = player.Character
	if not character or not character:FindFirstChild("HumanoidRootPart") then return end

	local rootPart = character.HumanoidRootPart
	local primaryPart = minion.PrimaryPart

	if not primaryPart then
		warn("Cannot setup follow behavior - minion has no primary part")
		return
	end

	-- First remove any existing constraints
	for _, child in pairs(minion:GetChildren()) do
		if child:IsA("WeldConstraint") or child:IsA("AlignPosition") or child:IsA("BodyPosition") or child:IsA("BodyGyro") then
			child:Destroy()
		end
	end

	-- Position the minion behind the player
	minion:SetPrimaryPartCFrame(rootPart.CFrame * CFrame.new(0, 0, -5))

	-- Add a BodyPosition to provide smooth following
	local bodyPosition = Instance.new("BodyPosition")
	bodyPosition.Name = "FollowPosition"
	bodyPosition.MaxForce = Vector3.new(10000, 10000, 10000)
	bodyPosition.Position = rootPart.Position + Vector3.new(0, 0, -5)
	bodyPosition.D = 100 -- Damping to make movement smoother
	bodyPosition.P = 1000 -- Power/stiffness of the constraint
	bodyPosition.Parent = primaryPart

	-- Make the minion face the same direction as the player
	local bodyGyro = Instance.new("BodyGyro")
	bodyGyro.Name = "FacingGyro"
	bodyGyro.MaxTorque = Vector3.new(0, 10000, 0) -- Only rotate on Y axis
	bodyGyro.D = 100
	bodyGyro.P = 1000
	bodyGyro.CFrame = rootPart.CFrame
	bodyGyro.Parent = primaryPart

	-- Set up a connection to update the body position target
	local connection = RunService.Heartbeat:Connect(function()
		if not minion or not minion.Parent or not player.Character or not player.Character:FindFirstChild("HumanoidRootPart") then
			connection:Disconnect()
			return
		end

		-- Update the target position to be 5 studs behind the player
		local targetPosition = player.Character.HumanoidRootPart.Position + (player.Character.HumanoidRootPart.CFrame.LookVector * -5)
		bodyPosition.Position = targetPosition

		-- Update the facing direction
		bodyGyro.CFrame = CFrame.new(primaryPart.Position, Vector3.new(
			player.Character.HumanoidRootPart.Position.X,
			primaryPart.Position.Y,
			player.Character.HumanoidRootPart.Position.Z
			))
	end)

	-- Store the connection on the minion for cleanup
	minion:SetAttribute("FollowConnection", tostring(connection))

	-- Make sure ALL parts of the minion are non-collidable
	for _, part in pairs(minion:GetDescendants()) do
		if part:IsA("BasePart") then
			part.CanCollide = false

			-- Set network ownership for better performance
			pcall(function()
				part:SetNetworkOwner(player)
			end)

			-- Ensure transparency doesn't affect collision
			if part.Transparency >= 0.95 then
				part.CanTouch = false
			end
		end
	end

	-- Add specialized collision handler for physics edge cases
	local heartbeatConnection
	heartbeatConnection = RunService.Heartbeat:Connect(function()
		if not minion or not minion.Parent then
			if heartbeatConnection then
				heartbeatConnection:Disconnect()
			end
			return
		end

		-- Re-apply CanCollide=false on every frame to handle any state changes
		for _, part in pairs(minion:GetDescendants()) do
			if part:IsA("BasePart") then
				part.CanCollide = false
			end
		end
	end)

	-- Store this connection for cleanup
	minion:SetAttribute("CollisionConnection", tostring(heartbeatConnection))

	print("Set up follow behavior for minion: " .. minion.Name)
end

-- Create emergency minion when nothing else works
function MinionManager:CreateEmergencyMinion(minionData, player)
	print("Creating emergency minion for player: " .. player.Name)

	local character = player.Character
	if not character or not character:FindFirstChild("HumanoidRootPart") then
		warn("Player character not found for emergency minion creation")
		return false
	end

	-- Create a model
	local model = Instance.new("Model")
	model.Name = "EmergencyMinion_" .. minionData.UUID

	-- Create the body part
	local body = Instance.new("Part")
	body.Name = "Body"
	body.Shape = Enum.PartType.Ball
	body.Size = Vector3.new(2, 2, 2) * 0.5
	body.BrickColor = BrickColor.new("Bright blue")
	body.Material = Enum.Material.Neon
	body.CanCollide = false
	body.Anchored = false
	body.CanTouch = false  -- Disable touch events completely
	body.CollisionGroup = "Minions"  -- Set collision group
	body.Parent = model

	model.PrimaryPart = body

	-- Create a billboard GUI for the name
	local billboardGui = Instance.new("BillboardGui")
	billboardGui.Name = "NameTag"
	billboardGui.Size = UDim2.new(0, 100, 0, 40)
	billboardGui.StudsOffset = Vector3.new(0, 1, 0)
	billboardGui.Adornee = body
	billboardGui.Parent = body

	local nameLabel = Instance.new("TextLabel")
	nameLabel.Name = "NameLabel"
	nameLabel.Size = UDim2.new(1, 0, 1, 0)
	nameLabel.BackgroundTransparency = 1
	nameLabel.TextColor3 = Color3.new(1, 1, 1)
	nameLabel.TextStrokeTransparency = 0
	nameLabel.TextStrokeColor3 = Color3.new(0, 0, 0)
	nameLabel.Font = Enum.Font.GothamBold
	nameLabel.TextSize = 14
	nameLabel.Text = ""
	nameLabel.Parent = billboardGui

	-- Create folder structure if needed
	local minionsFolder = workspace:FindFirstChild("Minions")
	if not minionsFolder then
		minionsFolder = Instance.new("Folder")
		minionsFolder.Name = "Minions"
		minionsFolder.Parent = workspace
	end

	local playerMinionsFolder = minionsFolder:FindFirstChild(player.Name)
	if not playerMinionsFolder then
		playerMinionsFolder = Instance.new("Folder")
		playerMinionsFolder.Name = player.Name
		playerMinionsFolder.Parent = minionsFolder
	end

	-- Positioning
	local rootPart = character.HumanoidRootPart
	body.CFrame = rootPart.CFrame * CFrame.new(0, 0, -5)

	model.Parent = playerMinionsFolder

	-- Use the new follow behavior instead of weld
	-- Set up the emergency minion to use the same follow behavior
	self:SetupFollowBehavior(model, player)

	-- Track it in active minions
	self.ActiveMinions[minionData.UUID] = {
		Model = model,
		Data = minionData,
		Player = player
	}

	-- Set up collision handling with PhysicsService
	pcall(function()
		local PhysicsService = game:GetService("PhysicsService")

		-- Create collision groups if they don't exist
		local success = pcall(function()
			PhysicsService:RegisterCollisionGroup("Minions")
			PhysicsService:RegisterCollisionGroup("Players")
		end)

		if success then
			-- Set collision group behavior to prevent minions from colliding with players
			PhysicsService:CollisionGroupSetCollidable("Minions", "Players", false)
		end
	end)

	print("Created emergency minion for player: " .. player.Name)
	return true
end

-- Despawn a minion by UUID
function MinionManager:DespawnMinion(minionUUID)
	local minionData = self.ActiveMinions[minionUUID]
	if not minionData then
		warn("Minion not found with UUID: " .. minionUUID)
		return false
	end

	-- Disconnect any follow connection
	if minionData.Model then
		-- Disconnect follow connection
		local connection = minionData.Model:GetAttribute("FollowConnection")
		if connection then
			-- We can't directly disconnect from the attribute, but we can clean up
			-- all BodyPosition and BodyGyro objects
			for _, part in pairs(minionData.Model:GetDescendants()) do
				if part:IsA("BodyPosition") or part:IsA("BodyGyro") then
					part:Destroy()
				end
			end
		end

		-- Disconnect collision connection
		local collisionConnection = minionData.Model:GetAttribute("CollisionConnection")
		if collisionConnection then
			for _, part in pairs(minionData.Model:GetDescendants()) do
				if part:IsA("BasePart") then
					part.CanCollide = false
				end
			end
		end

		-- Destroy the model
		minionData.Model:Destroy()
	end

	-- Remove from active minions
	self.ActiveMinions[minionUUID] = nil

	return true
end

-- Despawn all minions for a player
function MinionManager:DespawnPlayerMinions(player)
	local minionsToRemove = {}

	-- Find all minions belonging to the player
	for uuid, minionData in pairs(self.ActiveMinions) do
		if minionData.Player == player then
			table.insert(minionsToRemove, uuid)
		end
	end

	-- Despawn each minion
	for _, uuid in ipairs(minionsToRemove) do
		self:DespawnMinion(uuid)
	end

	return #minionsToRemove > 0
end

-- Initialize collision groups when the module loads
local function setupCollisionGroups()
	pcall(function()
		local PhysicsService = game:GetService("PhysicsService")

		-- Create collision groups
		pcall(function()
			PhysicsService:RegisterCollisionGroup("Minions")
			PhysicsService:RegisterCollisionGroup("Players")
		end)

		-- Set collision behaviors
		PhysicsService:CollisionGroupSetCollidable("Minions", "Players", false)
		PhysicsService:CollisionGroupSetCollidable("Minions", "Minions", false)

		-- Assign players to the Players collision group
		local function setPlayerCollisionGroup(player)
			if player.Character then
				for _, part in pairs(player.Character:GetDescendants()) do
					if part:IsA("BasePart") then
						pcall(function()
							part.CollisionGroup = "Players"
						end)
					end
				end
			end

			player.CharacterAdded:Connect(function(character)
				for _, part in pairs(character:GetDescendants()) do
					if part:IsA("BasePart") then
						pcall(function()
							part.CollisionGroup = "Players"
						end)
					end
				end

				character.DescendantAdded:Connect(function(descendant)
					if descendant:IsA("BasePart") then
						pcall(function()
							descendant.CollisionGroup = "Players"
						end)
					end
				end)
			end)
		end

		-- Set up collision groups for existing players
		for _, player in pairs(Players:GetPlayers()) do
			setPlayerCollisionGroup(player)
		end

		-- Set up collision groups for new players
		Players.PlayerAdded:Connect(setPlayerCollisionGroup)
	end)
end

-- Run the setup
setupCollisionGroups()

return MinionManager.new() -- Return an instance instead of the class
